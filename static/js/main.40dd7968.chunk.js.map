{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroudColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","trim","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","backgroundColor","Boolean","window","location","hostname","match","container","createRoot","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40dd7968.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props){\r\n\r\n    return(\r\n<nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand  \" href=\"#\" >{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active \" aria-current=\"page\" href=\"#\" >Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link \" to=\"/about\" >{props.aboutText}</Link>\r\n        </li> */}\r\n       \r\n      </ul>\r\n      {/*<form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n    </form>*/}\r\n    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n      \r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n    \r\n}\r\n\r\n\r\nNavbar.propTypes = {title:PropTypes.string.isRequired,                    //proptypes\r\n            aboutText:PropTypes.string}\r\n\r\nNavbar.defaultProps= {\r\n    title: 'set title here',\r\n    aboutText: 'About text here'\r\n}\r\n","import React,{useState} from 'react'                    //importing HOOK i.e useState to make state variable\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n  \r\n  const handleUpClick=()=>{\r\n    //console.log(\"Uppercase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to uppercase!\",\"success\");\r\n  }\r\n\r\n  const handleLoClick=()=>{\r\n    //console.log(\"Lowercase was clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to lowercase!\",\"success\");\r\n  }\r\n\r\n  const handleClearClick=()=>{\r\n    //console.log(\"ClearText was clicked\" + text);\r\n    let newText = '';\r\n    setText(newText)\r\n    props.showAlert(\"Text cleard!\",\"success\");\r\n  }\r\n\r\n  const handleOnChange=(event)=>{\r\n    console.log(\"On changed\");\r\n    setText(event.target.value)\r\n  }\r\nconst handleCopy = () =>{\r\n  var text = document.getElementById(\"myBox\");\r\n  text.select();\r\n  navigator.clipboard.writeText(text.value);\r\n  props.showAlert(\"Text copied to clipboard!\",\"success\");\r\n}\r\nconst handleExtraSpaces = ()=>{\r\n  let newText = text.split(/[ ]+/);\r\n  setText(newText.join(\" \"))\r\n  props.showAlert(\"Extra space removed!\",\"success\");\r\n}\r\n  const[text, setText] = useState('')     //text=variable(default value=''),setText=update text using this function.\r\n  //text=\"new text\";                                    //wrong way to change the state\r\n  //setText(\"new text\");                                //right way to change the state.\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h2 >{props.heading}</h2>\r\n          <div className=\"mb-3\">\r\n          <textarea className =\"form-control\" value={text} onChange={handleOnChange} style={{backgroudColor: props.mode === 'dark'?'grey':'white' }} id=\"myBox\" rows=\"5\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to uppercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n      </div>\r\n\r\n<div className=\"container my-2\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n<h2>Your text summary</h2>\r\n  <p>{text && text.trim().length !==0 ? text.split(\" \").length : 0 } words and  {text.length} characters </p>\r\n  <p> {0.008 * text.split(\" \").length} Minutes To read</p>\r\n  <h3>Preview</h3>\r\n  <p>{text.length>0?text:\"Enter something in textbox to preview it here\"}</p>\r\n</div>\r\n      </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word)=>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n         <strong>{capitalize(props.alert.type)}</strong> :{props.alert.msg}\r\n          \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react';\nimport Alert from './components/Alert';\n// import {\n//    BrowserRouter as \n//    Router, \n//    Routes, \n//    Route, \n//    } from 'react-router-dom';\n\n\n\nfunction App() {      \nconst[mode, setMode] = useState('light'); // whether a dark mode is enable or not\nconst[alert,setAlert]=useState(null)\n\nconst showAlert = (message, type)=>{\nsetAlert({                                //creating object of alert\n  msg: message,\n  type: type\n})\nsetTimeout(() => {\n  setAlert(null);\n}, 2000);\n}\n //function based component\n const toggleMode = ()=>{\n  if(mode==='light'){\n    setMode('dark')\n    document.body.style.backgroundColor='#042743';\n    showAlert(\"Dark Mode has been Enabled\",\"success\");\n    document.title='MyApp - Dark Mode';\n  }\n  else{\n    setMode('light')\n    document.body.style.backgroundColor='white';\n    showAlert(\"Light Mode has been Enabled\",\"success\");\n    document.title='MyApp - Light Mode';\n\n  }\n  \n }\n  return (                                                  // all things inside retun is JSX. // passing \"MyAPP\" as props in Navbar.\n   <>      \n{/* <Router>                                              */}\n<Navbar title=\"MyApp\" aboutText=\"About MyApp\" mode={mode} toggleMode={toggleMode}/>      \n<Alert alert={alert}/>\n<div className='container my-3'>\n{/* <Routes>\n          <Route exact path=\"/about\" element={<About />} /> */}\n          <TextForm showAlert={showAlert} heading=\"Enter The text to analyze below\" mode={mode}/>\n           \n{/* </Routes> */}\n</div>                \n{/* </Router>  */}\n</>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n//import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createRoot } from 'react-dom/client';\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(<App  />);\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}